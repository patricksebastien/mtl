#N canvas 1 82 1351 661 10;
#X obj 53 203 inlet~;
#X obj 141 199 inlet~;
#X obj 58 368 outlet~;
#X obj 107 368 outlet~;
#X obj 53 320 tof/crossfade~ 2;
#X obj 531 194 inlet params;
#X obj 531 240 print PARAM_NOTFOUND;
#X obj 226 201 tof/param /wet 0 /g slider 0 1;
#X obj 226 244 line~;
#X msg 226 223 \$1 5;
#X obj 531 216 tof/param route;
#X obj 531 265 b;
#X obj 531 288 tof/param gui;
#N canvas 1 82 1259 661 octave-divider 1;
#X obj 135 529 hip~ 5;
#X obj 172 234 fiddle~ 2048;
#X obj 173 265 unpack;
#X obj 166 369 osc~;
#X obj 173 289 moses 1;
#X obj 136 442 *~;
#X obj 200 317 mtof;
#X obj 228 343 *;
#X obj 133 481 *~ 2;
#N canvas 296 213 758 306 delay 0;
#X obj 15 222 outlet~;
#X obj 14 21 inlet~;
#X obj 15 102 loadbang;
#X obj 15 152 expr 1000*1024/$f1;
#X obj 15 128 samplerate~;
#X text 208 47 write to delay line which has enough memory to hold
40 msec;
#X text 125 128 get sample rate at load time;
#X text 185 152 divide 1024 by sample rate to give time in seconds
\; multiply by 1000 to convert to milliseconds.;
#X text 168 197 read from the delay line at the calculater delay;
#X text 317 268 1024-sample delay;
#X obj 14 49 delwrite~ \$0-E03-del-g 40;
#X obj 15 195 delread~ \$0-E03-del-g;
#X connect 1 0 10 0;
#X connect 2 0 4 0;
#X connect 3 0 11 0;
#X connect 4 0 3 0;
#X connect 11 0 0 0;
#X restore 86 241 pd delay;
#X obj 173 188 inlet~;
#X obj 136 562 outlet~;
#X obj 415 531 hip~ 5;
#X obj 452 236 fiddle~ 2048;
#X obj 453 267 unpack;
#X obj 426 420 osc~;
#X obj 453 291 moses 1;
#X obj 414 454 *~;
#X obj 480 319 mtof;
#X obj 446 369 *;
#X obj 417 490 *~ 2;
#X obj 453 190 inlet~;
#X obj 416 564 outlet~;
#X obj 283 105 tof/param /multiplier 100 /g slider 0 100;
#X obj 269 205 / 100;
#X text 713 113 OCTAVE DIVIDING VIA RING MODULATION;
#X text 714 169 This patch demonstrates using ring modulation to alias
a sound down one octave. The ring modulation itself ("osc~" and multiplier)
is easy. (We step it up by a factor of 2 to balance the original better.)
;
#X text 716 235 Harder is getting the fundamental frequency of the
original sound. We do this with the complicated "fiddle~" object \,
which puts out a stream of analysis data for an incoming signal. The
"2048" argument specifies the analysis window size. The analysis is
most closely aligned with what the sound was doing at the middle of
the window \, i.e. \, 1024 samples ago. The "pd delay" window delays
the signal itself 1024 samples so it will be as tightly synchronized
with the analysis data as possible. (If you're doing this on a real-time
input \, you might drop the delay and settle for less perfect synchronization.)
;
#X text 716 407 About fiddle~ \, suffice it to say that the third outlet
contains (pitch \, amplitude) pairs. We unpack the pitch and strip
out any zeros (when fiddle~ fails to find a pitch it outputs zero but
we'd rather stick with the most recent good one). This is converted
from MIDI to Hertz \, and multiplied by 1/2 to control the modulation
oscillator. (You can also try large-ish integers which leave the pitch
intact but introduce funny formants.);
#N canvas 298 208 758 306 delay2 0;
#X obj 15 222 outlet~;
#X obj 14 21 inlet~;
#X obj 15 102 loadbang;
#X obj 15 152 expr 1000*1024/$f1;
#X obj 15 128 samplerate~;
#X text 208 47 write to delay line which has enough memory to hold
40 msec;
#X text 125 128 get sample rate at load time;
#X text 185 152 divide 1024 by sample rate to give time in seconds
\; multiply by 1000 to convert to milliseconds.;
#X text 168 197 read from the delay line at the calculater delay;
#X text 317 268 1024-sample delay;
#X obj 14 49 delwrite~ \$0-E03-del-d 40;
#X obj 15 195 delread~ \$0-E03-del-d;
#X connect 1 0 10 0;
#X connect 2 0 4 0;
#X connect 3 0 11 0;
#X connect 4 0 3 0;
#X connect 11 0 0 0;
#X restore 366 243 pd delay2;
#X obj 283 79 tof/argument 4;
#X obj 283 57 loadbang;
#X connect 0 0 11 0;
#X connect 1 2 2 0;
#X connect 2 0 4 0;
#X connect 3 0 5 1;
#X connect 4 1 6 0;
#X connect 5 0 8 0;
#X connect 6 0 7 0;
#X connect 7 0 3 0;
#X connect 8 0 0 0;
#X connect 9 0 5 0;
#X connect 10 0 9 0;
#X connect 10 0 1 0;
#X connect 12 0 22 0;
#X connect 13 2 14 0;
#X connect 14 0 16 0;
#X connect 15 0 17 1;
#X connect 16 1 18 0;
#X connect 17 0 20 0;
#X connect 18 0 19 0;
#X connect 19 0 15 0;
#X connect 20 0 12 0;
#X connect 21 0 29 0;
#X connect 21 0 13 0;
#X connect 23 0 24 0;
#X connect 24 0 7 1;
#X connect 24 0 19 1;
#X connect 29 0 17 0;
#X connect 30 0 23 0;
#X connect 31 0 30 0;
#X restore 88 271 pd octave-divider;
#X obj 226 169 tof/argument 3;
#X obj 226 145 loadbang;
#X connect 0 0 4 0;
#X connect 0 0 13 0;
#X connect 1 0 4 1;
#X connect 1 0 13 1;
#X connect 4 0 2 0;
#X connect 4 1 3 0;
#X connect 5 0 10 0;
#X connect 7 0 9 0;
#X connect 8 0 4 4;
#X connect 9 0 8 0;
#X connect 10 0 6 0;
#X connect 11 0 12 0;
#X connect 13 0 4 2;
#X connect 13 1 4 3;
#X connect 14 0 7 0;
#X connect 15 0 14 0;
